#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>


#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels


#define OLED_RESET     4 // Reset pin # (or -1 if sharing Arduino reset pin)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

#define FALLS  3
#define FALLSS  1

#define FRIEND_HEIGHT   16                            //friend character height
#define FRIEND_WIDTH    16                            //friend character width
static const unsigned char PROGMEM friend_bmp[] =     //friend character
{  B00000000, B00000000,
   B00000001, B10000000,
   B00000011, B11000000,
   B00001111, B11110000,
   B00011111, B11111000,
   B00110011, B11001100,
   B01110011, B11001110,
   B01111111, B11111110,
   B11111111, B11111111,
   B01110011, B11001110,
   B00111001, B10011100,
   B00011100, B00111000,
   B00001110, B01110000,
   B00000111, B11100000,
   B00000001, B10000000,
   B00000000, B00000000   };


#define ENEMY_HEIGHT   16                               //enemy character height
#define ENEMY_WIDTH    16                               //enemy character width
static const unsigned char PROGMEM enemy_bmp[] =        //enemy character

{  B00000000, B00011000,
   B00001100, B00011000,
   B00011110, B00011000,
   B00111110, B01111100,
   B00111111, B11111100,
   B01110011, B11100110,
   B11111111, B11111110,
   B01111111, B11111111,
   B00111111, B11111110,
   B00011111, B11111100,
   B00000000, B00000000,
   B00001111, B11110000,
   B00111111, B01111100,
   B00111000, B00001100,
   B01110000, B00001110,
   B11100000, B00000111  };

#define USER_HEIGHT  8                             //User character height
#define USER_WIDTH   24                            //User character width
static const unsigned char PROGMEM user_bmp[] =    //User character
{
  B11100000, B00000000, B00000111,
  B11100000, B00000000, B00000111,
  B11100000, B00000000, B00000111,
  B11100000, B00000000, B00000111,
  B11100000, B00000000, B00000111,
  B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111   };

void setup() {
  Serial.begin(9600);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3D))          // Address 0x3D for 128x64
  {
    
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);                                              // Don't proceed, loop forever
  }

  display.display();
  delay(2000);                                            // Pause for 2 seconds

  display.clearDisplay();                                 //clear display

  display.drawPixel(10, 10, SSD1306_WHITE);

  display.display();
  delay(2000);                                            //Pause for 2 seconds

  testdrawchar();                                         // Draw characters of the default font

  testdrawstyles();                                       // Draw 'stylized' characters

  testdrawbitmap();                                       // Draw a small bitmap image


  testanimate(friend_bmp,enemy_bmp, FRIEND_WIDTH, FRIEND_HEIGHT);   // Animate bitmaps
  
}

void loop() {
}

void testdrawchar(void) {
  display.clearDisplay();

  display.setTextSize(1);                               // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);                  // Draw white text
  display.setCursor(0, 0);                              // Start at top-left corner
  display.cp437(true);                                  // Use full 256 char 'Code Page 437' font

  for(int16_t i=0; i<256; i++) {
    if(i == '\n') display.write(' ');
    else          display.write(i);
  }

  display.display();
  delay(2000);                                          //Pause for 2 seconds
}

void testdrawstyles(void)
{
  display.clearDisplay();                              //clear display

  display.setTextSize(1);                              // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);                 // Draw white text
  display.setCursor(20,10);                            //Position over screen          
  display.println(F("Welcome to Game"));               //Print over screen


  display.setTextSize(1.5);                            //Text size
  display.setTextColor(SSD1306_WHITE);                 // Draw white text
  display.setCursor(5,35);                             //Position over screen
  display.print(F("Hope you will enjoy!"));            //Print over screen

  display.display();
  delay(3000);                                          //Pause for 3 seconds

  display.clearDisplay();                               //clear display
  
  display.display();
  delay(50);                                            // Pause for 0.05 seconds
 
  display.setTextSize(1.5);                             //Text size
  display.setTextColor(SSD1306_WHITE);                  // Draw white text
  display.setCursor(20,10);                             //Position over screen
  display.print(F("Save ur friends"));                  //Print over screen

  display.setTextSize(1.5);                             //Text size
  display.setTextColor(SSD1306_WHITE);                  // Draw white text
  display.setCursor(5,35);                              //Position over screen
  display.print(F("Leaving the monsters"));             //Print over screen    

  display.display();
  delay(3000);                                          //Pause for 3 seconds   
}


void testdrawbitmap(void) {
  display.clearDisplay();                               //clear display             

  display.drawBitmap(
    10,10,
    friend_bmp, FRIEND_WIDTH, FRIEND_HEIGHT, 1);
    
    display.setCursor(00,30);                          //Position over screen
    display.print(F("friend"));                        //Print over screen  

  display.drawBitmap(
    55,35,
   enemy_bmp, ENEMY_WIDTH, ENEMY_HEIGHT, 1);
   display.setCursor(45,55);                            //Position over screen
   display.print(F("monster"));                         //Print over screen  
   
   display.drawBitmap(
    100,17,
    user_bmp, USER_WIDTH, USER_HEIGHT, 1);
   display.setCursor(105,30);                            //Position over screen
   display.print(F("You"));                              //Print over screen  

   display.display();
   delay(3500);                                          //Pause for 3.5 seconds
  
  display.clearDisplay();                                //clear display
  
  display.setTextSize(1.5);                              //Text size
  display.setTextColor(SSD1306_WHITE);                   // Draw white text              
  display.setCursor(0,5);                                //Position over screen
  display.print(F("Saving ur friend will increase ur Score,")); //Print over screen
    
  display.setCursor(3,30);                                //Position over screen
  display.print(F("Saving monster will      damage user"));   //Print over screen
  display.setCursor(20,55);                              //Position over screen
  display.print(F("and Ends Game!"));                   //Print over screen
  
  display.display();
  delay(6000);                                          //Pause for 6 seconds             
   
  display.clearDisplay();                               //clear display
}

#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2

void testanimate(const uint8_t *bitmap1,const uint8_t *bitmap2, uint8_t w, uint8_t h) {
  int8_t f, icons[FALLS][3];
 
 display.clearDisplay();                               //clear display
 
                                                       // Initialize 'friend falls' positions
  for(f=0; f< FALLS; f++) {
    icons[f][XPOS]   = random(1 - FRIEND_WIDTH, display.width());
    icons[f][YPOS]   = -FRIEND_HEIGHT;
    icons[f][DELTAY] = random(1, 6);
    Serial.print(F("x: "));
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(F(" y: "));
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(F(" dy: "));
    Serial.println(icons[f][DELTAY], DEC);

int8_t f, iconss[FALLSS][3];

                                                          // Initialize 'enemy falls' positions
  for(f=0; f< FALLSS; f++) {
    iconss[f][XPOS]   = random(1 - ENEMY_WIDTH, display.width());
    iconss[f][YPOS]   = -ENEMY_HEIGHT;
    iconss[f][DELTAY] = random(1, 6);
    Serial.print(F("x: "));
    Serial.print(iconss[f][XPOS], DEC);
    Serial.print(F(" y: "));
    Serial.print(iconss[f][YPOS], DEC);
    Serial.print(F(" dy: "));
    Serial.println(iconss[f][DELTAY], DEC);

  }

  for(;;) {                      // Loop forever...
    display.clearDisplay();      // Clear the display

                                 // Draw each friend character falling:
    for(f=0; f< FALLS; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], bitmap1, w, h, SSD1306_WHITE);
    }
  display.setCursor(80,0);           //Text position
  display.print(F("SCORE="));        //Printing over screen
  
                                     //Displaying user character over screen
   display.drawBitmap(
    50,55,
    user_bmp, USER_WIDTH, USER_HEIGHT, 1);
    
  display.display();             // Show the display buffer on the screen
  delay(20);                     // Pause for 0.02 second

 

                                 // Then update coordinates of each friend character...
    for(f=0; f< FALLS; f++) {
      icons[f][YPOS] += icons[f][DELTAY];
                                // If friend character is off the bottom of the screen...
      if (icons[f][YPOS] >= display.height()) {
                                // Reinitialize to a random position, just off the top
        icons[f][XPOS]   = random(1 - FRIEND_WIDTH, display.width());
        icons[f][YPOS]   = -FRIEND_HEIGHT;
        icons[f][DELTAY] = random(1, 6);
      }
    }
  

                                 // Draw each enemy character falling
    for(f=0; f< FALLSS; f++) {
      display.drawBitmap(iconss[f][XPOS], iconss[f][YPOS], bitmap2, w, h, SSD1306_WHITE);
    }

    display.display();           // Show the display buffer on the screen
    delay(200);                  // Pause for 0.2 second

                                 // Then update coordinates of enemy character...
    for(f=0; f< FALLSS; f++) {
      iconss[f][YPOS] += iconss[f][DELTAY];
                                 // If enemy character is off the bottom of the screen...
      if (iconss[f][YPOS] >= display.height()) {
                                  // Reinitialize to a random position, just off the top
        iconss[f][XPOS]   = random(1 - ENEMY_WIDTH, display.width());
        iconss[f][YPOS]   = -ENEMY_HEIGHT;
        iconss[f][DELTAY] = random(1, 6);
      }
    }
  }
  }
  }
